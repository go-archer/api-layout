// Package docs GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by swaggo/swag
package docs

import (
	"bytes"
	"encoding/json"
	"strings"
	"text/template"

	"github.com/swaggo/swag"
)

var doc = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "termsOfService": "https://archer.plus",
        "contact": {
            "name": "Archer",
            "url": "https://archer.plus",
            "email": "archer.plus@qq.com"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/areas/cities/{code}": {
            "get": {
                "description": "根据省份行政代码获取城市列表",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "行政区域"
                ],
                "summary": "获取城市列表",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "省份行政代码",
                        "name": "code",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "城市列表",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/entity.Area"
                            }
                        }
                    },
                    "400": {
                        "description": "错误信息",
                        "schema": {
                            "$ref": "#/definitions/state.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/areas/committees/{code}": {
            "get": {
                "description": "根据街道行政代码获取绝味会列表",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "行政区域"
                ],
                "summary": "获取居委会列表",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "街道行政代码",
                        "name": "code",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "居委会列表",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/entity.Area"
                            }
                        }
                    },
                    "400": {
                        "description": "错误信息",
                        "schema": {
                            "$ref": "#/definitions/state.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/areas/districts/{code}": {
            "get": {
                "description": "根据城市行政代码获取区县列表",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "行政区域"
                ],
                "summary": "获取区县列表",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "城市行政代码",
                        "name": "code",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "区县列表",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/entity.Area"
                            }
                        }
                    },
                    "400": {
                        "description": "错误信息",
                        "schema": {
                            "$ref": "#/definitions/state.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/areas/provinces": {
            "get": {
                "description": "获取省份列表",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "行政区域"
                ],
                "summary": "获取省份列表",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/entity.Area"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/state.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/areas/streets/{code}": {
            "get": {
                "description": "根据区县行政代码获取街道列表",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "行政区域"
                ],
                "summary": "获取街道列表",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "区县行政代码",
                        "name": "code",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "街道列表",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/entity.Area"
                            }
                        }
                    },
                    "400": {
                        "description": "错误信息",
                        "schema": {
                            "$ref": "#/definitions/state.ErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "entity.Area": {
            "type": "object",
            "properties": {
                "MergerName": {
                    "description": "组合名",
                    "type": "string"
                },
                "Pinyin": {
                    "description": "拼音",
                    "type": "string"
                },
                "area_code": {
                    "description": "行政代码",
                    "type": "integer"
                },
                "city_code": {
                    "description": "区号",
                    "type": "string"
                },
                "lat": {
                    "description": "纬度",
                    "type": "number"
                },
                "level": {
                    "description": "层级",
                    "type": "integer"
                },
                "lng": {
                    "description": "经度",
                    "type": "number"
                },
                "name": {
                    "description": "名称",
                    "type": "string"
                },
                "parent_code": {
                    "description": "父级行政代码",
                    "type": "integer"
                },
                "short_name": {
                    "description": "简称",
                    "type": "string"
                },
                "zip_code": {
                    "description": "邮政编码",
                    "type": "integer"
                }
            }
        },
        "state.ErrorResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "description": "错误代码",
                    "type": "integer"
                },
                "message": {
                    "description": "错误描述",
                    "type": "string"
                }
            }
        }
    }
}`

type swaggerInfo struct {
	Version     string
	Host        string
	BasePath    string
	Schemes     []string
	Title       string
	Description string
}

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = swaggerInfo{
	Version:     "1.0",
	Host:        "127.0.0.1:8080",
	BasePath:    "/api/v1",
	Schemes:     []string{},
	Title:       "API文档",
	Description: "common project.",
}

type s struct{}

func (s *s) ReadDoc() string {
	sInfo := SwaggerInfo
	sInfo.Description = strings.Replace(sInfo.Description, "\n", "\\n", -1)

	t, err := template.New("swagger_info").Funcs(template.FuncMap{
		"marshal": func(v interface{}) string {
			a, _ := json.Marshal(v)
			return string(a)
		},
		"escape": func(v interface{}) string {
			// escape tabs
			str := strings.Replace(v.(string), "\t", "\\t", -1)
			// replace " with \", and if that results in \\", replace that with \\\"
			str = strings.Replace(str, "\"", "\\\"", -1)
			return strings.Replace(str, "\\\\\"", "\\\\\\\"", -1)
		},
	}).Parse(doc)
	if err != nil {
		return doc
	}

	var tpl bytes.Buffer
	if err := t.Execute(&tpl, sInfo); err != nil {
		return doc
	}

	return tpl.String()
}

func init() {
	swag.Register(swag.Name, &s{})
}
